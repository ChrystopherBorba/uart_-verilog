`timescale 1ns / 1ps

module iec101(
    input  wire       clk,
    input  wire       read,        // pulso: novo byte em `data`
    input  wire [7:0] data,        // byte recebido
    output reg  [7:0] out_byte,    // byte de saída
    output reg        out_valid    // indica que out_byte é válido
);

    parameter MAX_FRAME = 255;

    reg [7:0] buffer [0:MAX_FRAME-1];
    reg [5:0] byte_count = 0;
    reg [5:0] send_count = 0;
    reg       collecting = 1;
    reg       sending = 0;

    always @(posedge clk) begin
        if (collecting) begin
            if (read) begin
                buffer[byte_count] <= data;
                if (data == 8'b00010110) begin // Terminador encontrado
                    collecting <= 0;
                    sending    <= 1;
                    send_count <= 0;
                end else if (byte_count < (MAX_FRAME-1)) begin
                    byte_count <= byte_count + 1;
                end
            end
            out_valid <= 0;
        end else if (sending) begin
            out_byte  <= buffer[send_count];
            out_valid <= 1;
            send_count <= send_count + 1;
            if (send_count == byte_count) begin
                // Enviou todos os bytes (inclusive o terminador)
                sending    <= 0;
                collecting <= 1;
                byte_count <= 0;
                out_valid  <= 0; // Opcional: desativa out_valid no ciclo seguinte ao último byte
            end
        end else begin
            out_valid <= 0;
        end
    end

endmodule
